{"version":3,"sources":["components/WeatherCard.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","sol_key","sol_value","className","JSON","stringify","AT","mx","WD","compass_point","Season","fetchWeather","a","fetch","process","res","json","Weather","useQuery","data","status","console","log","sol_keys","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAeeA,EAbK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC9B,OACE,yBAAKC,UAAU,QACb,mCAASF,GACT,2CAAiBG,KAAKC,UAAUH,EAAUI,GAAGC,IAA7C,KACA,6CACkBH,KAAKC,UAAUH,EAAUM,GAAG,GAAGC,eAAgB,KAEjE,qCAAWP,EAAUQ,OAArB,OCNAC,EAAY,uCAAG,4BAAAC,EAAA,sEACDC,MAAM,iDAAD,OAC4BC,2CAD5B,2BADJ,cACbC,EADa,yBAIZA,EAAIC,QAJQ,2CAAH,qDAuCHC,EAhCC,WAAO,IAAD,EACKC,YAAS,UAAWP,GAArCQ,EADY,EACZA,KAAMC,EADM,EACNA,OAGd,OAFAC,QAAQC,IAAIH,GAGV,6BACE,4CAEY,YAAXC,GAAwB,gDAEb,UAAXA,GAAsB,oDAEX,YAAXA,GACC,6BACGD,EAAKI,SAASC,KAAI,SAACvB,EAASwB,GAE3B,IAAMvB,EAAYiB,EAAKlB,GACvB,OACE,kBAAC,EAAD,CACEyB,IAAKD,EACLxB,QAASA,EACTC,UAAWA,OARnB,OCbOyB,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCMcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.ccdd69ac.chunk.js","sourcesContent":["import React from \"react\";\n\nconst WeatherCard = ({ sol_key, sol_value }) => {\n  return (\n    <div className=\"card\">\n      <h3>Sol:{sol_key}</h3>\n      <p>Avergae Temp:{JSON.stringify(sol_value.AT.mx)} </p>\n      <p>\n        AWind Directon:{JSON.stringify(sol_value.WD[0].compass_point)}{\" \"}\n      </p>\n      <p>Season:{sol_value.Season} </p>\n    </div>\n  );\n};\n\nexport default WeatherCard;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport WeatherCard from \"./WeatherCard\";\n\nconst fetchWeather = async () => {\n  const res = await fetch(\n    `https://api.nasa.gov/insight_weather/?api_key=${process.env.REACT_APP_API_KEY}&feedtype=json&ver=1.0`\n  );\n  return res.json();\n};\n\nconst Weather = () => {\n  const { data, status } = useQuery(\"weather\", fetchWeather);\n  console.log(data);\n\n  return (\n    <div>\n      <h2>Mars Weather</h2>\n\n      {status === \"loading\" && <div>Loading Data...</div>}\n\n      {status === \"error\" && <div>Error Fetching Data</div>}\n\n      {status === \"success\" && (\n        <div>\n          {data.sol_keys.map((sol_key, index) => {\n            /* Extract sol_value from data, for current sol_key */\n            const sol_value = data[sol_key];\n            return (\n              <WeatherCard\n                key={index}\n                sol_key={sol_key}\n                sol_value={sol_value}\n              />\n            );\n          })}\n          )\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Weather;\n","import React from \"react\";\nimport Weather from \"./components/Weather\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}